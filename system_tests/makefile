

zawilinski=java -jar ../dist/zawilinski-1.0.3.jar
scripts=scripts

# Makefile.local should assign the name of the full wiktionary dump 
# to the variable $(fullDump)
include makefile.local

ifeq ($(suffix $(fullDump)), "bz2")
	readFullDump=bunzip2 -c $(fullDump)
else
	readFullDump=cat $(fullDump)
endif



# "expected" output is output that is generated through means other 
# than running Zawilinski (e.g., through grep or other scripts.)
# When updating Zawilinski, these files need not be regenerated.
expected=output/expected

# "observed" output is output generated by running Zawilinski.
# These output files must be regenerated whenever Zawilinski 
# is updated.
observed=output/observed

# Temporary output is generated byt he 
tempOutput=output/temp

# Some Zawilinksi features need to be tested "by hand".  This is, of course,
# too big a task to do on the full dump.  This directory contains some
# hand-crafted input and expected output files for use by tests.
data=regression_data



#scripts=scripts

all: filter_by_title_saves_correct_articles



######################################################################
#
# Test 1: Filter by Title Saves Correct Articles
#     (a) Handle a full Wiktionary dump
#     (b) Finds all titles matching the listed regexps
#     (c) Finds only titles matching the listed regexp
#     (d) Interprets parameters as regular expressions
#
#  The basic idea is that we filter the full dump "by hand" 
#  using grep, then verify that Zawilinski selects precisely the
#  same pages.
######################################################################


# These patterns were chosen to (1) produce a relatively small output, and (2) use a variety of regexp features.
egrep_title_patterns='xyz|a.x|zo.+u.*u'
zawilinski_title_patterns=xyz a.x zo.+u.*u

$(expected)/filtered_title_list_from_egrep.txt: $(fullDump)
	$(readFullDump) | grep '<title>' | egrep $(egrep_title_patterns) > $@

$(observed)/full_dump_filtered_by_title.txt: $(fullDump)
	$(zawilinski) Title $(fullDump) $(zawilinski_title_patterns) > $@


# Key idea: 
#   (1) grep the raw dump for <title> tags with certain patterns.
#   (2) run Zawilinski
#   (3) grep the Zawilinski output for *all* titles
#   The output of the two greps should be identical. 


filter_by_title_saves_correct_articles: $(expected)/filtered_title_list_from_egrep.txt $(observed)/full_dump_filtered_by_title.txt
	@echo "Running" $@
	@echo "   (Does Zawilinski find precisely the same articles as grep?)"	
	grep '<title>' $(observed)/full_dump_filtered_by_title.txt | diff -w $(expected)/filtered_title_list_from_egrep.txt -
	@echo "** Pass ** $@"


#########################################################################
#
# Test 2: Filter by Title Retains All Data From Selected Articles
#
# (e) When a matching title is found, all the data for that page
#     should be preserved (unless some data is dumped because the page
#     has been vandalized).
#
# To verify this, we need to look at the output of Zawilinski and verify
# it contains the correct data. I couldn't think of a reasonably simple
# "non-Zawilinski" technique to generate the expected data, so I created
# an expected output by hand.
#########################################################################

# A smaller version of the full dump that can be checked by hand
beginningOfDump=$(data)/enwiktionary-200170201-beginningOnly.xml

# The expected output of this test generated by hand from smaller input file
userFreeAtBeginningOfDump=$(data)/enwiktionary-200170201-UserAndFreeAtBeginning.xml
$(observed)/partial_dump_filtered_by_title.txt: $(beginningOfDump)
	$(zawilinski) Title $(beginningOfDump) User free > $@

filter_by_title_preserves_all_page_data: $(observed)/partial_dump_filtered_by_title.txt $(userFreeAtBeginningOfDump)
	@echo "Running "$@
	@echo "  (Does Zawilinski retain all article data when filtering my title?)"
	$(scripts)/wikimediaToZawilinski.rb < $(userFreeAtBeginningOfDump) | diff -w - $(observed)/partial_dump_filtered_by_title.txt
	@echo "** Pass ** $@"





#all: $(outputDir)/countRevisions $(outputDir)/countLanguageRevisions_Polish $(outputDir)/countLanguageRevisions_French

# 
# $(outputDir)/countRevisions: $(scripts)/count_revisions.rb
# 	date
# 	echo "Running count_revisions"
# 	bunzip2 -c $(allArticles) | ruby $(scripts)/count_revisions.rb > $@
# 	date
# 
# $(outputDir)/countLanguageRevisions_Polish: $(scripts)/count_revisions.rb
# 	date
# 	echo "Running countRevisions"
# 	bunzip2 -c $(allArticles) | ruby $(scripts)/count_language_revisions.rb Polish> $@
# 	date
# 
# $(outputDir)/countLanguageRevisions_French: $(scripts)/count_language_revisions.rb
# 	date
# 	echo "Running countRevisions"
# 	bunzip2 -c $(allArticles) | ruby $(scripts)/count_language_revisions.rb French> $@
# 	date
# 

